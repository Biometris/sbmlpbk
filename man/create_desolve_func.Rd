% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/simulation_functions.R
\name{create_desolve_func}
\alias{create_desolve_func}
\title{Create a deSolve-compatible model function}
\usage{
create_desolve_func(model, outputs = NULL)
}
\arguments{
\item{model}{SBML model S3 class.}

\item{outputs}{Optional named list of equations (character strings). Each element
defines a derived output, e.g. concentrations or calculated parameters:
\code{list(CGut = "Agut / Gut", BW = "BW")}.}
}
\value{
A function with signature \code{function(time, state, parameters)} suitable
for use with \code{\link[deSolve]{ode}}. The returned function produces a list with:
\itemize{
\item First element: vector of state derivatives (in the same order as \code{state}).
\item Subsequent elements: named numeric values of selected compartments
and/or parameters (if requested).
}
}
\description{
This function generates a closure that can be used as the \code{func} argument in
\code{\link[deSolve]{ode}} or related solvers. The returned function computes
derivatives from a model specification (ODEs and assignment rules), while
optionally including selected compartment and parameter values in the output.
}
\examples{
library(deSolve)

# Load example model
model_file <- system.file("extdata/", "simple_oral.sbml", package = "sbmlpbk")
model <- load_sbml(model_file)

# Create deSolve-compatible function
func <- create_desolve_func(
  model,
  list(
    CGut = "AGut / Gut",
    BW = "BW"
  )
)

# Set initial states
initial_states <- setNames(rep(0, length(model$species)), names(model$species))

# Set input events (single unit bolus at time 1)
eventdat <- data.frame(var = c("AGut"), time = c(1), value = c(1), method = c("add"))

# Run simulation
out <- ode(
  y = initial_states,
  times = seq(0, 24, by = 1),
  func = func,
  parms = model$params,
  events = list(data = eventdat)
)
head(out)

}
\seealso{
\code{\link[deSolve]{ode}}
}
