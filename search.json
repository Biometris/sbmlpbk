[{"path":"https://biometris.github.io/sbmlpbk/articles/sbmlpbk.html","id":"the-sbmlpbk-package","dir":"Articles","previous_headings":"","what":"The sbmlpbk package","title":"The sbmlpbk package","text":"R package importing Physiologically Based Kinetic (PBK) models encoded Systems Biology Markup Language (SBML) format, enabling simulation using deSolve package.","code":""},{"path":"https://biometris.github.io/sbmlpbk/articles/sbmlpbk.html","id":"loading-a-model","dir":"Articles","previous_headings":"The sbmlpbk package","what":"Loading a model","title":"The sbmlpbk package","text":"Use function load_sbml load PBK model SBML file. example, package includes simple SBML PBK model simple_oral.sbml. following example shows load model file: output load_sbml function object class sbmlModel. object named list following elements: compartment:  named list IDs default sizes model compartments. species:  named list IDs info model species. param:  named list IDs (default) values model parameters. function_defs:  list additional functions defined SBML file, form character strings representing R expressions. reactions:  list reactions, defined list ID, reactant (species ID), product (species ID), kinetic law (character string R expression). assignment_rules:  list assignment rules defined SBML file, form character strings representing R expression. rate_rules:  list rate rules defined SBML file, form character strings representing R expression. odes:  list ODEs generated SBML file, form character strings representing R expression. default_params:  Vector default values parameters model. func:  deSolve compliant R-function running simulations using ode function. summary function can used get short description content sbmlModel object.","code":"## Load SBML model from file file_simple_oral <- system.file(\"extdata/\", \"simple_oral.sbml\", package = \"sbmlpbk\") model <- load_sbml(file_simple_oral) summary(model) #> ================== #> SBML Model Summary #> ================== #>  #> Compartments:     5  [ Gut, Blood, Liver, Rest, Urine ] #> Species:  5  [ AGut, ABlood, ALiver, ARest, AUrine ] #> Parameters:   19     [ BW, VRc, VLc, VBc, QCC, ... ] #> Functions:    0 #> Assignment rules:     6  #> Rate rules:   0  #> Reactions:    6  #>  #> Time unit:    h  #> Amount unit:  ug  #> Volume unit:  L"},{"path":"https://biometris.github.io/sbmlpbk/articles/sbmlpbk.html","id":"inspecting-model-equations","dir":"Articles","previous_headings":"The sbmlpbk package","what":"Inspecting model equations","title":"The sbmlpbk package","text":"print equations loaded model, type:","code":"print(model, type = 'equations') #>  #> # --- Assignment rules --- #> Blood <- BW * VBc #> Liver <- BW * VLc #> Rest <- BW * VRc #> QC <- BW^0.75 * QCC #> QL <- QC * QLc #> QR <- QC * QRc #>  #>  #> # --- Transfer ODEs --- #> dAGut <- -AGut * Ka #> dABlood <- -ABlood * QL/Blood + ALiver * QL/(Liver * PCLiver) - ABlood * QR/Blood + ARest * QR/(PCRest * Rest) - ABlood * CLUrine/Blood #> dALiver <- AGut * Ka + ABlood * QL/Blood - ALiver * QL/(Liver * PCLiver) #> dARest <- ABlood * QR/Blood - ARest * QR/(PCRest * Rest) #> dAUrine <- ABlood * CLUrine/Blood"},{"path":"https://biometris.github.io/sbmlpbk/articles/sbmlpbk.html","id":"running-simulations","dir":"Articles","previous_headings":"The sbmlpbk package","what":"Running simulations","title":"The sbmlpbk package","text":"code shows run simulations using ode function deSolve. example, function load_params loads parameter values CSV file. Alternatively, model$default_params can passed use model’s default parameters. function load_functions loads additional functions defined SBML file. function create_desolve_func creates function can used func argument deSolve’s ode function. , simulation output ready processing. can, example, plot output time series follows:","code":"## Load model functions load_functions(model)  ## Load params params_csv <- system.file(\"extdata/\", \"simple_oral_params.csv\", package = \"sbmlpbk\") params <- load_params(model, file = params_csv, param_instance = \"simple_PARAM\")  # Set input species input_species <- \"AGut\"  # Set input events (single unit bolus at time 5) eventdat <- data.frame(var = c(input_species), time = c(5), value = c(1), method = c(\"add\"))  # Set simulation times times <- seq(0, 40, 0.1)  # Set initial states initial_states <- setNames(rep(0, length(model$species)), names(model$species))  # Load deSolve model function func <- create_desolve_func(model)  # Simulate out <- ode(   y = initial_states,   times = times,   func = func,   parms = params,   events = list(data = eventdat) ) # Set up plotting layout n_cols <- 3 n_rows <- ceiling(length(model$species) / n_cols) par(mfrow = c(n_rows, n_cols), mar = c(4, 4, 2, 1))  # Loop through variables and plot for (species in names(model$species)) {   plot(out[,1], out[,species],        type = \"l\",        main = species,        xlab = \"time\",        ylab = species) }"},{"path":"https://biometris.github.io/sbmlpbk/articles/sbmlpbk.html","id":"running-dosing-scenarions","dir":"Articles","previous_headings":"The sbmlpbk package","what":"Running dosing scenarions","title":"The sbmlpbk package","text":"Running PBK model simulations various dosing scenarios requires construction deSolve patterns. PBK models may differ time resolution (e.g., hours/days) dosing amounts (e.g., mg, ug, moles) creation dosing scenarios, running simulations, evaluating outputs requires alignment model’s time resolution dosing/output amounts desired resolutions. methods provided assist . method creates deSolve-compatible events specified dosing scenario user-specified time unit amounts unit. Likewise, method creates compliant sequence, specifying times simulation output wanted. ## Additional simulation outputs Additional simulation outputs, dynamic parameters, compartment sizes, also outputs concentrations, can included via outputs argument create_desolve_func function. code , three additional outputs defined. Size blood compartment (.e., blood volume), concentration blood, value body weight parameter (constant simulation).","code":"dosing_events <- list(   # Single bolus dose of amount 20 at time 1 (in days)   list(     target = \"AGut\",     dose_type = \"single_bolus\",     time = 1,     amount = 20   ),   # Repeated bolus dose with amount 10, starting at day 4, repeating   # every day until time day 10    list(     target = \"AGut\",     dose_type = \"repeated_bolus\",     time = 4,     amount = 10,     interval = 1,     until = 10   ) )  # Set simulation times; 10 days with hourly evaluation resolution num_days = 10 evals_per_day = 24 times <- create_desolve_times(   model,   duration = num_days,   step = 1/evals_per_day,   unit = 'd' )  # Create and set deSolve dosing events eventdat <- create_desolve_events(   model,   dosing_events,   time_unit = 'd',   # events time unit was in days   amount_unit = 'ug' )  # Set initial states initial_states <- setNames(rep(0, length(model$species)), names(model$species))  # Load deSolve model function func <- create_desolve_func(model)  # Simulate out <- ode(   y = initial_states,   times = times,   func = func,   parms = model$params,   events = list(data = eventdat) )  # Set up plotting layout n_cols <- 3 n_rows <- ceiling(length(model$species) / n_cols) par(mfrow = c(n_rows, n_cols), mar = c(4, 4, 2, 1))  # Loop through species and plot for (species in names(model$species)) {   plot(out[,1], out[,species],        type = \"l\",        main = species,        xlab = paste(\"time [\", summary(model)$time_unit, \"]\", sep=\"\"),        ylab = paste(species, \" [\", summary(model)$amount_unit, \"]\", sep=\"\")) } # Define additional outputs outputs <- list(   Blood = \"Blood\",   CBlood = \"ABlood / Blood\",   BW = \"BW\" )  # Load deSolve model function with additional outputs func <- create_desolve_func(   model,   outputs = outputs )  # Simulate out <- ode(   y = initial_states,   times = times,   func = func,   parms = model$params,   events = list(data = eventdat) )  # Set up plotting layout par(mfrow = c(2, 2), mar = c(4, 4, 2, 1))  # Plot amount of chemical in blood plot(out[,1], out[,'ABlood'],        type = \"l\",        main = 'ABlood',        xlab = paste(\"time [\", summary(model)$time_unit, \"]\", sep=\"\"),        ylab = 'ABlood')  # Loop through outputs and plot for (output in names(outputs)) {   plot(out[,1], out[,species],        type = \"l\",        main = output,        xlab = paste(\"time [\", summary(model)$time_unit, \"]\", sep=\"\"),        ylab = output) }"},{"path":"https://biometris.github.io/sbmlpbk/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Johannes Kruisselbrink. Author, maintainer.","code":""},{"path":"https://biometris.github.io/sbmlpbk/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Kruisselbrink J (2025). sbmlpbk: SBML PBK Model Simulation. R package version 0.0.0.9001, https://biometris.github.io/sbmlpbk/.","code":"@Manual{,   title = {sbmlpbk: SBML PBK Model Simulation},   author = {Johannes Kruisselbrink},   year = {2025},   note = {R package version 0.0.0.9001},   url = {https://biometris.github.io/sbmlpbk/}, }"},{"path":"https://biometris.github.io/sbmlpbk/index.html","id":"the-sbmlpbk-package","dir":"","previous_headings":"","what":"SBML PBK Model Simulation","title":"SBML PBK Model Simulation","text":"R package importing Physiologically Based Kinetic (PBK) models encoded Systems Biology Markup Language (SBML) format, enabling simulation using deSolve package. package still development.","code":""},{"path":"https://biometris.github.io/sbmlpbk/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"SBML PBK Model Simulation","text":"Install GitHub (using remotes package):","code":"remotes::install_github(\"Biometris/sbmlpbk\", ref = \"main\", dependencies = TRUE, build_vignettes = TRUE)"},{"path":[]},{"path":"https://biometris.github.io/sbmlpbk/index.html","id":"loading-sbml-files","dir":"","previous_headings":"Quickstart","what":"Loading SBML files","title":"SBML PBK Model Simulation","text":"load SBML model file, simply use load_sbml function. following example loads file simple_oral.sbml provided package:","code":"# Load package library(sbmlpbk)  # Get filename file_simple_oral <- system.file(\"extdata/\", \"simple_oral.sbml\", package = \"sbmlpbk\")  # Load model model <- load_sbml(file_simple_oral)  # Get model summary summary(model)"},{"path":"https://biometris.github.io/sbmlpbk/index.html","id":"running-simulations","dir":"","previous_headings":"Quickstart","what":"Running simulations","title":"SBML PBK Model Simulation","text":"code shows run simulations model loaded using ode function deSolve.","code":"# Load package deSolve library(deSolve)  # Load model functions load_functions(model)  # Load params params_csv <- system.file(\"extdata/\", \"simple_oral_params.csv\", package = \"sbmlpbk\") params <- load_params(model, file = params_csv, param_instance = \"simple_PARAM\")  # Set input species input_species <- \"AGut\"  # Set input events (single unit bolus at time 1) eventdat <- data.frame(var = c(input_species), time = c(1), value = c(1), method = c(\"add\"))  # Set initial states initial_states <- setNames(rep(0, length(model$species)), names(model$species))  # Set simulation times times <- seq(0, 40, 1)  # Load deSolve model function func <- create_desolve_func(model)  # Simulate out <- ode(   y = initial_states,   times = times,   func = func,   parms = params,   events = list(data = eventdat) )  # Plot results plot(out)"},{"path":"https://biometris.github.io/sbmlpbk/index.html","id":"helper-functions-for-unit-alignment-and-simulation","dir":"","previous_headings":"Quickstart","what":"Helper functions for unit alignment and simulation","title":"SBML PBK Model Simulation","text":"sbmlpbk offers number functions make easier run simulations deSolve loaded models time units specified. functions automatically align e.g. time resolution substance amount units model desired units dosing simulation. code functions create_desolve_times create_desolve_events used generate deSolve timings events, simulation 10 days dosing pattern repeated bolus dose amount 10, starting day 4, repeating every day time day 10.","code":"# Create deSolve timings; 10 days with hourly evaluation resolution times <- create_desolve_times(   model,   duration = 10,   step = 1/24,   unit = 'd' # time unit day )  # Create and set deSolve dosing events for the model eventdat <- create_desolve_events(   model,   dosing_events = list(     list(       target = \"AGut\",       dose_type = \"repeated_bolus\",       time = 4,       amount = 10,       interval = 1,       until = 10     )   ),   time_unit = 'd', # events time unit was in days   amount_unit = 'ug' )  # Set initial states initial_states <- setNames(rep(0, length(model$species)), names(model$species))  # Load deSolve model function func <- create_desolve_func(model)  # Simulate out <- ode(   y = initial_states,   times = times,   func = func,   parms = model$params,   events = list(data = eventdat) )  # Set up plotting layout n_cols <- 3 n_rows <- ceiling(length(model$species) / n_cols) par(mfrow = c(n_rows, n_cols), mar = c(4, 4, 2, 1))  # Loop through species and plot for (species in names(model$species)) {   plot(out[,1], out[,species],        type = \"l\",        main = species,        xlab = paste(\"time [\", summary(model)$time_unit, \"]\", sep=\"\"),        ylab = paste(species, \" [\", summary(model)$amount_unit, \"]\", sep=\"\")) }"},{"path":"https://biometris.github.io/sbmlpbk/index.html","id":"detailed-example","dir":"","previous_headings":"","what":"Detailed example","title":"SBML PBK Model Simulation","text":"details, see vignette.","code":"vignette('sbmlpbk', package='sbmlpbk')"},{"path":"https://biometris.github.io/sbmlpbk/reference/create_desolve_events.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a deSolve-compatible events data frame — create_desolve_events","title":"Create a deSolve-compatible events data frame — create_desolve_events","text":"Converts list structured dosing scenarios event data frame can used events argument running PBK model simulations using ode.","code":""},{"path":"https://biometris.github.io/sbmlpbk/reference/create_desolve_events.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a deSolve-compatible events data frame — create_desolve_events","text":"","code":"create_desolve_events(   model,   dosing_events,   time_unit = \"h\",   amount_unit = \"ug\" )"},{"path":"https://biometris.github.io/sbmlpbk/reference/create_desolve_events.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a deSolve-compatible events data frame — create_desolve_events","text":"model object class sbmlModel dosing events created. dosing_events list dosing scenarios, element named list following fixed structure. scenario described scenario type describing type dosing pattern (single vs. repeated bolus vs. continuous) target. Furthermore, scenarios must time amount, may include interval, duration, specification, depending dosing type. time_unit optional character string describing time unit specified dosing_events. Event timings aligned time unit model. Current options \"h\" hours (default), \"d\" days, \"model\" assuming timings specified events already aligned time unit model. amount_unit optional character string describing amount unit specified dosing_events. Amounts dosing events aligned amount unit model. Current options \"ng\", \"ug\" (default), \"mg\", \"model\" (assuming timings specified events already aligned time unit model).","code":""},{"path":"https://biometris.github.io/sbmlpbk/reference/create_desolve_events.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a deSolve-compatible events data frame — create_desolve_events","text":"data.frame formatted use events argument deSolve::ode(), columns: var Name state variable dose applies (e.g., \"A_compartment\"). time Numeric time event (hours). value Amount added state variable. method Typically \"add\" bolus \"rate\" continuous infusion.","code":""},{"path":"https://biometris.github.io/sbmlpbk/reference/create_desolve_events.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Create a deSolve-compatible events data frame — create_desolve_events","text":"function interprets dosing scenario (specified named list) based type (e.g., bolus vs. continuous, single vs. repeated) generates corresponding time-stamped events use PBK PK simulations. Recognized type values: \"single_bolus\" – single dose time. \"repeated_bolus\" – repeated bolus doses time interval interval. \"single_continuous\" – continuous infusion time time + duration. \"repeated_continuous\" – multiple infusions lasting duration, repeating every interval . target compartment/state variable dose assumed specified field like target default \"A_Gut\" unspecified.","code":""},{"path":[]},{"path":"https://biometris.github.io/sbmlpbk/reference/create_desolve_events.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create a deSolve-compatible events data frame — create_desolve_events","text":"","code":"model_file <- system.file(\"extdata/\", \"simple_oral.sbml\", package = \"sbmlpbk\") model <- load_sbml(model_file) dosing_events <- list(   list(target = \"AGut\", dose_type = \"single_bolus\", amount = 100, time = 0),   list(     target = \"AGut\",     dose_type = \"repeated_bolus\",     amount = 50,     time = 12,     interval = 24,     until = 96   ),   list(     target = \"AAir\",     dose_type = \"single_continuous\",     amount = 20,     time = 0,     duration = 24   ),   list(     target = \"AAir\",     dose_type = \"repeated_continuous\",     amount = 20,     time = 56,     duration = 12,     interval = 24,     until = 96   ) )  events <- create_desolve_events(model, dosing_events) head(events) #>    var time value  method #> 1 AGut    0   100     add #> 2 AAir    0    20 replace #> 3 AGut   12    50     add #> 4 AAir   24     0 replace #> 5 AGut   36    50     add #> 6 AAir   56    20 replace"},{"path":"https://biometris.github.io/sbmlpbk/reference/create_desolve_func.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a deSolve-compatible model function — create_desolve_func","title":"Create a deSolve-compatible model function — create_desolve_func","text":"function generates closure can used func argument ode related solvers. returned function computes derivatives model specification (ODEs assignment rules), optionally including selected compartment parameter values output.","code":""},{"path":"https://biometris.github.io/sbmlpbk/reference/create_desolve_func.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a deSolve-compatible model function — create_desolve_func","text":"","code":"create_desolve_func(model, outputs = NULL)"},{"path":"https://biometris.github.io/sbmlpbk/reference/create_desolve_func.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a deSolve-compatible model function — create_desolve_func","text":"model SBML model S3 class. outputs Optional named list equations (character strings). element defines derived output, e.g. concentrations calculated parameters: list(CGut = \"Agut / Gut\", BW = \"BW\").","code":""},{"path":"https://biometris.github.io/sbmlpbk/reference/create_desolve_func.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a deSolve-compatible model function — create_desolve_func","text":"function signature function(time, state, parameters) suitable use ode. returned function produces list : First element: vector state derivatives (order state). Subsequent elements: named numeric values selected compartments /parameters (requested).","code":""},{"path":[]},{"path":"https://biometris.github.io/sbmlpbk/reference/create_desolve_func.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create a deSolve-compatible model function — create_desolve_func","text":"","code":"library(deSolve)  # Load example model model_file <- system.file(\"extdata/\", \"simple_oral.sbml\", package = \"sbmlpbk\") model <- load_sbml(model_file)  # Create deSolve-compatible function func <- create_desolve_func(   model,   list(     CGut = \"AGut / Gut\",     BW = \"BW\"   ) )  # Set initial states initial_states <- setNames(rep(0, length(model$species)), names(model$species))  # Set input events (single unit bolus at time 1) eventdat <- data.frame(var = c(\"AGut\"), time = c(1), value = c(1), method = c(\"add\"))  # Run simulation out <- ode(   y = initial_states,   times = seq(0, 24, by = 1),   func = func,   parms = model$params,   events = list(data = eventdat) ) head(out) #>      time      AGut      ABlood      ALiver      ARest      AUrine      CGut BW #> [1,]    0 0.0000000 0.000000000 0.000000000 0.00000000 0.000000000 0.0000000 70 #> [2,]    1 0.0000000 0.000000000 0.000000000 0.00000000 0.000000000 0.0000000 70 #> [3,]    2 0.9512294 0.003257892 0.004269830 0.03752682 0.003716044 0.9512294 70 #> [4,]    3 0.9048374 0.005489790 0.005730590 0.07171887 0.012223327 0.9048374 70 #> [5,]    4 0.8607080 0.007352787 0.006938563 0.10032517 0.024675474 0.8607080 70 #> [6,]    5 0.8187307 0.008893254 0.007925930 0.12404544 0.040404630 0.8187307 70"},{"path":"https://biometris.github.io/sbmlpbk/reference/create_desolve_times.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a deSolve-compatible times sequence — create_desolve_times","title":"Create a deSolve-compatible times sequence — create_desolve_times","text":"Creates deSolve compliant times sequence can used times argument ode, specifying times simulation output wanted.","code":""},{"path":"https://biometris.github.io/sbmlpbk/reference/create_desolve_times.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a deSolve-compatible times sequence — create_desolve_times","text":"","code":"create_desolve_times(model, duration, step, unit = \"h\")"},{"path":"https://biometris.github.io/sbmlpbk/reference/create_desolve_times.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a deSolve-compatible times sequence — create_desolve_times","text":"model object class sbmlModel. duration number describing total duration simulation. step number describing resolution terms step size. unit optional character string describing time unit specified duration step length. Timings aligned time unit model. Current options \"h\" hours (default), \"d\" days, \"model\" assuming specified duration step length considered line time unit model.","code":""},{"path":"https://biometris.github.io/sbmlpbk/reference/create_desolve_times.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a deSolve-compatible times sequence — create_desolve_times","text":"vector simulation output times formatted use times argument ode.","code":""},{"path":[]},{"path":"https://biometris.github.io/sbmlpbk/reference/create_desolve_times.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create a deSolve-compatible times sequence — create_desolve_times","text":"","code":"model_file <- system.file(\"extdata/\", \"simple_oral.sbml\", package = \"sbmlpbk\") model <- load_sbml(model_file)  times <- create_desolve_times(   model,   duration = 10, # 10 days   step = 1/24,   # every hour   unit = 'd'     # times in days )  head(times) #> [1] 0 1 2 3 4 5"},{"path":"https://biometris.github.io/sbmlpbk/reference/load_functions.html","id":null,"dir":"Reference","previous_headings":"","what":"Loads the functions from the SBML model — load_functions","title":"Loads the functions from the SBML model — load_functions","text":"Loads functions SBML model","code":""},{"path":"https://biometris.github.io/sbmlpbk/reference/load_functions.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Loads the functions from the SBML model — load_functions","text":"","code":"load_functions(model, envir = parent.frame())"},{"path":"https://biometris.github.io/sbmlpbk/reference/load_functions.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Loads the functions from the SBML model — load_functions","text":"model SBML model S3 class. envir Environment load functions. Default environment function called.","code":""},{"path":"https://biometris.github.io/sbmlpbk/reference/load_functions.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Loads the functions from the SBML model — load_functions","text":"object class sbmlModel.","code":""},{"path":"https://biometris.github.io/sbmlpbk/reference/load_params.html","id":null,"dir":"Reference","previous_headings":"","what":"Load PBK model parameter values from a CSV — load_params","title":"Load PBK model parameter values from a CSV — load_params","text":"function reads CSV file parameter values returns named numeric vector. rows matching specified idInstance used.","code":""},{"path":"https://biometris.github.io/sbmlpbk/reference/load_params.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Load PBK model parameter values from a CSV — load_params","text":"","code":"load_params(model, filename, param_instance, ...)"},{"path":"https://biometris.github.io/sbmlpbk/reference/load_params.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Load PBK model parameter values from a CSV — load_params","text":"model object class sbmlModel parametrisations loaded. filename Path CSV file containing parameters. param_instance instance ID used filter parameters. specified, assumed file contains one parametrisation. ... Additional arguments passed read.csv.","code":""},{"path":"https://biometris.github.io/sbmlpbk/reference/load_params.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Load PBK model parameter values from a CSV — load_params","text":"named numeric vector parameter values.","code":""},{"path":"https://biometris.github.io/sbmlpbk/reference/load_params.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Load PBK model parameter values from a CSV — load_params","text":"input CSV file must contain following columns: idModelInstance character string identifying model instance. Used filtering. Parameter name parameter loaded. become names output vector. Value numeric value associated parameter.","code":""},{"path":"https://biometris.github.io/sbmlpbk/reference/load_params.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Load PBK model parameter values from a CSV — load_params","text":"","code":"model_file <- system.file(\"extdata/\", \"simple_oral.sbml\", package = \"sbmlpbk\") model <- load_sbml(model_file) params_file <- system.file(\"extdata/\", \"simple_oral_params.csv\", package = \"sbmlpbk\") params <- load_params(model, params_file, 'simple_PARAM') head(params) #> $BW #> [1] 70 #>  #> $VRc #> [1] 0.9003 #>  #> $VLc #> [1] 0.0257 #>  #> $VBc #> [1] 0.074 #>  #> $QCC #> [1] 15 #>  #> $QRc #> [1] 0.773 #>   # Example CSV structure: # idModelInstance,Parameter,Value # \"model_1\",a,0.5 # \"model_2\",a,1.0 # \"model_2\",b,2.5"},{"path":"https://biometris.github.io/sbmlpbk/reference/load_sbml.html","id":null,"dir":"Reference","previous_headings":"","what":"Load SBML model — load_sbml","title":"Load SBML model — load_sbml","text":"Load SBML model","code":""},{"path":"https://biometris.github.io/sbmlpbk/reference/load_sbml.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Load SBML model — load_sbml","text":"","code":"load_sbml(sbml_file)"},{"path":"https://biometris.github.io/sbmlpbk/reference/load_sbml.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Load SBML model — load_sbml","text":"sbml_file File path SBML file.","code":""},{"path":"https://biometris.github.io/sbmlpbk/reference/load_sbml.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Load SBML model — load_sbml","text":"object class sbmlModel.","code":""},{"path":"https://biometris.github.io/sbmlpbk/reference/load_sbml.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Load SBML model — load_sbml","text":"","code":"file <- system.file(\"extdata/\", \"simple_oral.sbml\", package = \"sbmlpbk\") model <- load_sbml(file)"},{"path":"https://biometris.github.io/sbmlpbk/reference/print.sbmlModel.html","id":null,"dir":"Reference","previous_headings":"","what":"Print an sbmlModel Object — print.sbmlModel","title":"Print an sbmlModel Object — print.sbmlModel","text":"print method objects class sbmlModel. supports multiple output modes depending type argument.","code":""},{"path":"https://biometris.github.io/sbmlpbk/reference/print.sbmlModel.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Print an sbmlModel Object — print.sbmlModel","text":"","code":"# S3 method for class 'sbmlModel' print(x, ...)"},{"path":"https://biometris.github.io/sbmlpbk/reference/print.sbmlModel.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Print an sbmlModel Object — print.sbmlModel","text":"x object class sbmlModel. ... Additional arguments. following argument can passed via ...: type character string, either \"summary\" (default) \"equations\". Controls whether high-level summary model's differential equations printed.","code":""},{"path":"https://biometris.github.io/sbmlpbk/reference/print.sbmlModel.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Print an sbmlModel Object — print.sbmlModel","text":"","code":"file <- system.file(\"extdata/\", \"simple_oral.sbml\", package = \"sbmlpbk\") model <- load_sbml(file) print(model, type = \"summary\") #> ================== #> SBML Model Summary #> ================== #>  #> Compartments:\t 5 \t[ Gut, Blood, Liver, Rest, Urine ] #> Species:\t 5 \t[ AGut, ABlood, ALiver, ARest, AUrine ] #> Parameters:\t 19 \t[ BW, VRc, VLc, VBc, QCC, ... ] #> Functions:\t 0 #> Assignment rules:\t 6  #> Rate rules:\t 0  #> Reactions:\t 6  #>  #> Time unit:\t h  #> Amount unit:\t ug  #> Volume unit:\t L  #>  print(model, type = \"equations\") #>  #> # --- Assignment rules --- #> Blood <- BW * VBc #> Liver <- BW * VLc #> Rest <- BW * VRc #> QC <- BW^0.75 * QCC #> QL <- QC * QLc #> QR <- QC * QRc #>  #>  #> # --- Transfer ODEs --- #> dAGut <- -AGut * Ka #> dABlood <- -ABlood * QL/Blood + ALiver * QL/(Liver * PCLiver) - ABlood * QR/Blood + ARest * QR/(PCRest * Rest) - ABlood * CLUrine/Blood #> dALiver <- AGut * Ka + ABlood * QL/Blood - ALiver * QL/(Liver * PCLiver) #> dARest <- ABlood * QR/Blood - ARest * QR/(PCRest * Rest) #> dAUrine <- ABlood * CLUrine/Blood #>"},{"path":"https://biometris.github.io/sbmlpbk/reference/summary.sbmlModel.html","id":null,"dir":"Reference","previous_headings":"","what":"Summary function for the class sbmlModel — summary.sbmlModel","title":"Summary function for the class sbmlModel — summary.sbmlModel","text":"Gives summary object S3 class sbmlModel.","code":""},{"path":"https://biometris.github.io/sbmlpbk/reference/summary.sbmlModel.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Summary function for the class sbmlModel — summary.sbmlModel","text":"","code":"# S3 method for class 'sbmlModel' summary(object, ...)"},{"path":"https://biometris.github.io/sbmlpbk/reference/summary.sbmlModel.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Summary function for the class sbmlModel — summary.sbmlModel","text":"object object class sbmlModel. ... used.","code":""},{"path":"https://biometris.github.io/sbmlpbk/reference/summary.sbmlModel.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Summary function for the class sbmlModel — summary.sbmlModel","text":"list summary items.","code":""}]
